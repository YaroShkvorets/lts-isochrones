"use strict";
const path_1 = require("path");
const deepSlice = require("deep-slice");
const fs = require("fs");
const utils_1 = require("./utils");
/**
 * Writes GeoJSON file
 *
 * @param {string} path File path
 * @param {Features} geojson GeoJSON FeatureCollection
 * @param {Options} options Options
 * @param {string[]} [options.properties] List of properties to include in GeoJSON
 * @param {number} [options.precision=6] Reduce coordinate precision
 * @param {boolean} [options.boolean=false] Drop Z coordinates
 * @param {Array<string|number>} [options.properties] Only include the following properties
 * @returns {void}
 */
function writer(path, geojson, options = {}) {
    // Define options
    const properties = options.properties;
    const precision = options.precision || 6;
    const z = options.z;
    mkdir(path);
    const stream = fs.createWriteStream(path);
    writeHeader(stream);
    geojson.features.map((feature, index, array) => {
        // Include specifici attributes
        if (properties !== undefined) {
            feature.properties = utils_1.pick(feature.properties, properties);
        }
        // Reduce coordinates precision
        feature.geometry.coordinates = toFix(feature.geometry.coordinates, precision);
        // Drop z Coordinates
        if (z) {
            feature.geometry.coordinates = deepSlice(feature.geometry.coordinates, 0, 2);
        }
        // Remove empty properties
        feature = removeEmptyProperties(feature);
        // Write
        writeFeature(stream, feature, index, array);
    });
    writeFooter(stream);
}
exports.writer = writer;
/**
 * Remove Empty values
 *
 * @param {Feature} feature
 */
function removeEmptyProperties(feature) {
    const properties = {};
    Object.keys(feature.properties).map(key => {
        const value = feature.properties[key];
        if (value !== undefined && value !== '' && value !== null) {
            properties[key] = value;
        }
    });
    feature.properties = properties;
    return feature;
}
exports.removeEmptyProperties = removeEmptyProperties;
/**
 * Reads GeoJSON file
 *
 * @param {string} path File must be a GeoJSON FeatureCollection
 * @returns {Features} GeoJSON FeatureCollection
 */
function reader(path) {
    return JSON.parse(fs.readFileSync(path, 'utf-8'));
}
exports.reader = reader;
function mkdir(path) {
    const folder = path_1.dirname(path_1.resolve(path));
    if (!fs.existsSync(folder)) {
        fs.mkdirSync(folder);
    }
}
function writeHeader(stream) {
    stream.write('{\n');
    stream.write('"type": "FeatureCollection",\n');
    stream.write('"features": [\n');
}
function writeFooter(stream) {
    stream.write(']\n}');
}
function writeFeatureEnd(stream, index, array) {
    if (index + 1 !== array.length) {
        stream.write(',\n');
    }
    else {
        stream.write('\n');
    }
}
/**
 * Reduce coordinate precision
 */
function toFix(array, precision = 6) {
    return array.map(value => {
        if (typeof (value) === 'object') {
            return toFix(value);
        }
        return Number(value.toFixed(precision));
    });
}
/**
 * Write Feature
 */
function writeFeature(stream, feature, index, array) {
    stream.write(JSON.stringify(feature));
    writeFeatureEnd(stream, index, array);
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    writer,
    reader,
};
